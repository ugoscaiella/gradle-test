import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

import org.gradle.api.Plugin
import org.gradle.api.Project

apply plugin: NestedPlugin

class NestedPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.configure(project) {
            apply plugin: 'com.github.johnrengelman.shadow'
            shadowJar {
                mergeServiceFiles()
                exclude 'META-INF/*.SF'
                exclude 'META-INF/*.DSA'
                exclude 'META-INF/*.RSA'
            }
        }


    }
}



def fetchGitCommit() {
    try {
        def ref = new File(".git/HEAD").readLines()[0]
        def sha1
        if (ref.startsWith("ref") ){
            sha1 = new File(".git", ref.substring(5)).getText().substring(0,8)
        }
        else {
            sha1 = ref.substring(0,8)
        }
        return sha1
    } catch (e) {
        logger.log(LogLevel.WARN, "Unable to get GIT commit: $e")
        return "<unknown>"
    }
}

ext { 
    gitCommit = fetchGitCommit()
}

// shadowJar {
//     mergeServiceFiles()
//     exclude 'META-INF/*.SF'
//     exclude 'META-INF/*.DSA'
//     exclude 'META-INF/*.RSA'
// }

processResources {

    filesMatching("*.properties") {
        filter(ReplaceTokens, tokens: project.properties.findAll { k,v -> k && v })
    }
}

task ('processDockerfile', type: Copy) {
    from 'src'
    into buildDir
    include '**/*Dockerfile'
    filesMatching("**/*Dockerfile") { details ->
        details.path = "${details.name}"
    }
    includeEmptyDirs = false
    filter(ReplaceTokens, tokens: project.properties.findAll { k,v -> k && v } )

}

task ('addVersionFile') {
    new File(output.resourcesDir, "${project.name}.version.json").text = groovy.json.JsonOutput.toJson([
        'version': project.version,
        'gitCommit': gitCommit 
    ])
}

jar.finalizedBy processDockerfile
jar.finalizedBy shadowJar
jar.dependsOn addVersionFile

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8


